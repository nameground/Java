/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-12 07:00:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp01;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex03_005fObject_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>**JSP Object**</h2>\r\n");
      out.write("<pre>\r\n");
      out.write("=> Web 애플리케이션 기본 객체(implicit object)\r\n");
      out.write("=> JSP에서 별도 인스턴스 선언 없이 사용 가능\r\n");
      out.write("=> request, response, out, session, \r\n");
      out.write("   pageContext, application 등 9종류\r\n");
      out.write("   \r\n");
      out.write("</pre>\r\n");
      out.write("<h3>1. Request</h3>\r\n");
      out.write("\r\n");
      out.write(" *ContextPath => ");
      out.print(request.getContextPath() );
      out.write(" <br>\r\n");
      out.write(" *RealPath => ");
      out.print(request.getRealPath("/"));
      out.write(" <br>\r\n");
      out.write(" *RequestURI: ");
      out.print(request.getRequestURI() );
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <h3>2. Session</h3>\r\n");
      out.write(" Session_ID =");
      out.print(session.getId());
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <h3>3. out</h3>\r\n");
      out.write(" * out 출력 => ");
out.print("out객체로 출력하기"); 
      out.write("\r\n");
      out.write(" \r\n");
      out.write(" <h3>4. PageContext</h3>\r\n");
      out.write("=> JSP 페이지에 대한 정보를 저장한다. <br>\r\n");
      out.write("=> 기본 객체를 return 하는 메서드를 제공.<br>\r\n");
      out.write("   -> request 객체와 메서드가 return하는 객체와 동일성 비교<br>\r\n");
      out.write("   \r\n");

   HttpServletRequest req = (HttpServletRequest)pageContext.getRequest();

      out.write(" <br>\r\n");
      out.write("	-> 비교결과 : ");
      out.print( request == req );
      out.write("\r\n");
      out.write("	-> pageContext 가 제공하는 out 객체로 출력하기\r\n");
      out.write("	");
 pageContext.getOut().print("pageContext 가 제공하는 out 객체로 출력");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h3>5. Application</h3>\r\n");
      out.write("* 서버정보 => ");
      out.print( application.getServerInfo() );
      out.write(" <br>\r\n");
      out.write("* 서블릿 메이저버젼 => ");
      out.print( application.getMajorVersion() );
      out.write(" <br>\r\n");
      out.write("* 서블릿 마이너버젼 => ");
      out.print( application.getMinorVersion() );
      out.write(" <br>\r\n");
      out.write("* RealPath1 => ");
      out.print( application.getRealPath("") );
      out.write(" <br> (\"\" 사용시에는 실행중인 현 프로젝트의 RealPath return) <br>\r\n");
      out.write("* RealPath2 => ");
      out.print( application.getRealPath("/jsp01") );
      out.write(" <br> (지정한 경로의 RealPath) <br>\r\n");
      out.write("* -> HDD 상의 소스 위치가 아님 주의\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
