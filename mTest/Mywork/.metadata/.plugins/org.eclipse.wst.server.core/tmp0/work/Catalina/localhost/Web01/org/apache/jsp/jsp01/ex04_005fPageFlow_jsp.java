/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.80
 * Generated at: 2023-10-12 07:41:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp01;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex04_005fPageFlow_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 //Declaration : 선언부
	public int multiply(int a, int b) {
		return a*b;
	}
	String name="홍길동";
	int i=100;
	int j=200;

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/jsp01/ex01_HelloJsp.jsp", Long.valueOf(1696901826707L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Jsp Page Flow</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2> Jsp Page Flow</h2>\r\n");
      out.write("<h3>1. Forward</h3>\r\n");
      out.write("=> jsp Action Tag 를 이용한 이름\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	alert(\"Hello 로 이동합니다.\");\r\n");
      out.write("	// => Forward Test 시에는\r\n");
      out.write("	// => 스크립트는 브라우져에서 실행되기 때문에 실행 되지않음.\r\n");
      out.write("	// => 서버에서 forward 된 화면이 response 로 출력 되기 때문\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h3>2. Include</h3> \r\n");
      out.write("<hr>\r\n");
      out.write("-> 2.1) JSP Action Tag <br>\r\n");
      out.write("Jsp 문서의 완성된 웹페이지가 포함됨, 변수공유 불가능 (코드호환이 안됨) <br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("-> 2.2) Directive include Test <br>\r\n");
      out.write("Jsp 문서의 소스코드가 포함됨, 변수공유 가능 (코드호환이 됨) <br>\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>** Hello JSP **</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2>** Hello JSP **</h2>\r\n");
      out.write("<h3>안녕하세요 ~</h3>\r\n");
      out.write("<h3>* Jsp 장점 : View 작성 간편</h3>\r\n");
      out.write("<h3>* Jsp 단점 : Java Code 작성 불편</h3>\r\n");
      out.write("<hr>\r\n");
      out.write("<h3>=> Java Code</h3>\r\n");
      out.write("<pre>\r\n");
      out.write("1) Scriptlet : 자바코드\r\n");
      out.write("2) Expression : 표현식 (출력문)\r\n");
      out.write("3) Declaration : 선언부 (메서드 등)\r\n");
      out.write("</pre>\r\n");
      out.write("\r\n");
      out.write("=> 표현식(Expression) Test<br>\r\n");
      out.write("=> multiply(4,5)의 결과는 ");
      out.print(multiply(4,5));
      out.write("<br>\r\n");
      out.write("=> 변수출력: i=");
      out.print(i);
      out.write(", j=");
      out.print(j);
      out.write(", name=");
      out.print(name);
      out.write("<br>\r\n");
      out.write("=> 연산적용: i+j=");
      out.print(i+j);
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("=> Scriptlet : 자바코드<br>\r\n");
 	int result=multiply(i,j);
	name="Korea";

      out.write("\r\n");
      out.write("=> result=");
      out.print(result);
      out.write("<br>\r\n");
      out.write("=> name=");
      out.print(name);
      out.write("<br>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
      out.write("\r\n");
      out.write("<hr>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
